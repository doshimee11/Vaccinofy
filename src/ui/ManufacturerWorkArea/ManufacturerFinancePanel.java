/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.ManufacturerWorkArea;

import Business.Ecosystem;
import Business.Employee.Employee;
import Business.Enterprise.DistributorEnterprise;
import Business.Enterprise.Enterprise;
import Business.Enterprise.VaccineManufacturerEnterprise;
import Business.Inventory.Inventory;
import Business.Network.Network;
import Business.Organization.FinanceOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.Vaccine.Vaccine;
import Business.WorkQueue.PaymentRequest;
import Business.WorkQueue.WorkRequest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ADMIN
 */

public class ManufacturerFinancePanel extends javax.swing.JPanel {
    
    /**
     * Creates new form ManufactureFinanceWorkAreaJPanel
     */
    
    private JPanel userProcessContainer;
    private Ecosystem system;
    private UserAccount userAccount;
    private VaccineManufacturerEnterprise vaccineManufacturesEnterprise;
    
    public ManufacturerFinancePanel(JPanel userProcessContainer, Ecosystem system, UserAccount userAccount, VaccineManufacturerEnterprise vaccineManufacturesEnterprise) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.system = system;
        this.vaccineManufacturesEnterprise = vaccineManufacturesEnterprise;

        populateManufactureTable();
    }
    
    public void populateManufactureTable() {
        DefaultTableModel dtm = (DefaultTableModel) manufacturerOrderTable.getModel();
        dtm.setRowCount(0);

        for (Organization organization : vaccineManufacturesEnterprise.getOrganizationDirectory().getOrganizationDirectory()) {
            for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
                Enterprise ent = null;
                UserAccount user = (UserAccount) request.getSender();
                for (Network network : system.getNetworkDirectory()) {
                    for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterprisesDirectory()) {
                        for (UserAccount ua : enterprise.getUserAccountDirectory().getUserAccountDirectory()) {
                            if (ua == user) {
                                ent = enterprise;
                            }
                        }
                    }
                }
                for (Organization org : ent.getOrganizationDirectory().getOrganizationDirectory()) {
                    for (Inventory inventory : org.getInventoryDirectory().getInventoryDirectory()) {
                        if (request.getOrderID() == inventory.getVaccine().getVaccineID()) {
                            Object[] row = new Object[7];
                            row[0] = inventory.getVaccine();
                            row[1] = request.getOrderID();
                            row[2] = inventory.getVaccine().getVaccinePrice();
                            row[3] = request.getRequestedQuantity();
                            row[4] = request.getRequestedQuantity() * inventory.getVaccine().getVaccinePrice();
                            for (WorkRequest work : userAccount.getWorkQueue().getWorkRequestList()) {
                                if (inventory.getVaccine().getVaccineID() == work.getOrderID()) {
                                    row[5] = work.getReceiver();
                                    row[6] = work.getStatus();
                                }
                            }
                            dtm.addRow(row);
                        }
                    }
                }
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        manufacturerOrderTable = new javax.swing.JTable();
        sendButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Manage Manufacture Request");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 21, -1, -1));

        manufacturerOrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Vaccine Name", "Vaccine ID", "Price", "Quantity", "Total Price", "Receiver", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(manufacturerOrderTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(94, 101, 724, 126));

        sendButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        sendButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Paybill.jpg"))); // NOI18N
        sendButton.setText("Send Bill");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });
        add(sendButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(354, 288, 207, 40));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Vaccine Doodle.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 2, 1200, 1000));
    }// </editor-fold>//GEN-END:initComponents

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        try{
            int selectedRow = manufacturerOrderTable.getSelectedRow();
            Vaccine vaccine = (Vaccine) manufacturerOrderTable.getValueAt(selectedRow, 0);
            PaymentRequest request = new PaymentRequest();
            request.setRequestType("Manufacture Payment Request");
            request.setStatus("Sent");
            request.setPaymentRequest("Sent");
            request.setSender(userAccount);
            request.setOrderID(vaccine.getVaccineID());
            request.setRequestedQuantity(((Integer) (manufacturerOrderTable.getValueAt(selectedRow, 3))));
            UserAccount ua = (UserAccount) request.getSender();
            Employee employee = (Employee) ua.getEmployee();
            Enterprise enterprise = null;
            Network net = null;
            Organization org = null;
            
            for (Network network : system.getNetworkDirectory()) {
                for (Enterprise ent : network.getEnterpriseDirectory().getEnterprisesDirectory()) {
                    if (ent == vaccineManufacturesEnterprise) {
                        net = network;
                    }
                }
            }
            for (Enterprise ent : net.getEnterpriseDirectory().getEnterprisesDirectory()) {
                if (ent instanceof DistributorEnterprise) {
                    enterprise = ent;
                    break;
                }
            }
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationDirectory()) {
                if (organization instanceof FinanceOrganization) {
                    org = organization;
                }
            }
            if (org != null) {
                org.getWorkQueue().getWorkRequestList().add(request);
                userAccount.getWorkQueue().getWorkRequestList().add(request);
                populateManufactureTable();
            }
            
            JOptionPane.showMessageDialog(null, "Bill sent", "Payment Request", JOptionPane.INFORMATION_MESSAGE);
        }
        catch(Exception e){
            System.out.println("Exception executed" + e);
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable manufacturerOrderTable;
    private javax.swing.JButton sendButton;
    // End of variables declaration//GEN-END:variables
}
